unit lib_proxy;

interface

uses
  SysUtils, Classes, Windows,DBTables, VirtualTable, WinProcs,
  DB, ZAbstractRODataset, ZAbstractDataset, ZDataset, ZConnection,
  ZDbcIntfs, IdException, ComObj, MSXML2_TLB,
  Messages, Variants, Graphics, Controls, Forms, Dialogs, StdCtrls, RxMemDS, XMLIntf, XMLDoc;

type
  TProxyObject = class

    constructor Create(FORM_CODE:String);
    destructor Destroy; override;
    procedure SetOP(OP_CODE: String);
    procedure SetZConInfo(my_zconn : TZConnection; my_zqry: TZQuery);
    procedure SetProxyHost(proxyhost: String);
    function Connection_out : Boolean;
    function Connection_in : Boolean;
    procedure InputParam(Element_Name : String; Element_Value: String);
    procedure ExecuteCode;
    procedure ExecuteResult(MyDataSet: TRxMemoryData);  overload;
    procedure ExecuteResult(MyDataSet: TVirtualTable);  overload;
  private
    strSendBuffer : String;
    mForm_Code : String;
    mOp_code : String;
    mProxyHost : String;
    mPosition : Integer;
    bResult:integer;
    strResultSetKey : String;
    pStrInputMsg: PChar;
    pStrOutputMsg: PChar;
    zConn : TZConnection;
    zQry  : TZQuery;
    strString: string;

    function Open : Boolean;
    procedure SetPosition(position : Integer);
    procedure RowToTable(MyDataSet: TRxMemoryData; Element:IXMLDOMElement);  overload;
    procedure RowToTable(MyDataSet: TVirtualTable; Element:IXMLDOMElement);  overload;
    { Private declarations }
  public
    { Public declarations }

end;

var
  ProxyObject: TProxyObject;

const
  INPUT_MAX_SIZE = 1000;
  OUTPUT_MAX_SIZE = 1024 * 8;
  ZONE_IN = 1;
  ZONE_OUT = 2;


function  proxy_Open(szServerInfo:PChar) : integer; stdcall; External 'network_pc_delphi' index 1;
procedure proxy_Close(); stdcall; external 'network_pc_delphi' index 2;
function  proxy_Request(szInMsg:PChar; szOutMsg:PChar; nBufferLength:integer) : integer; stdcall; External 'network_pc_delphi' index 3;
Function  OperationToQuery(szInParam:PChar; szOutParam:PChar): Integer; stdcall; External 'wmsproxy.dll';

implementation

// Proxy로부터 받는 XML Return 값을 파싱함.
{
<ROWDATA>
<ROW Country="Europe" NameOfCountry="Denmark" Capital="Copenhagen" Area="25000" Population="5000000"/>'
<ROW Country="Asia" NameOfCountry="Korea" Capital="Seoul" Area="12000" Population="5000000"/>'
<ROW Country="Asia" NameOfCountry="Japan" Capital="Tokyo" Area="23000" Population="4000000"/>'
</ROWDATA>
그리드에서는 ROW에 대한 attribute 값만 저장.
}

constructor TProxyObject.Create(FORM_CODE:String);
begin
  mForm_code   := FORM_CODE;
end;

destructor TProxyObject.Destroy;
begin
  If (mPosition = ZONE_IN) Then
  begin
    proxy_Close();
  end;
end;

procedure TProxyObject.SetZConInfo(my_zconn : TZConnection; my_zqry: TZQuery);
begin
  zConn := my_zconn;
  zQry := my_zqry;
end;

procedure TProxyObject.SetProxyHost(proxyhost: String);
begin
  mProxyHost := proxyhost;
end;

function TProxyObject.Connection_in : Boolean;
begin
  IF (Open) Then  // 로그인을 위한 HTTP 세션열기
  Begin
    SetPosition(ZONE_IN);
    Result := True;
  End Else
  Begin
    Result := False;
    Exit;
  End;
end;

function TProxyObject.Connection_out : Boolean;
begin
  try
   zConn.Protocol := 'mysql-5';
   zConn.Connect;
    except  on e:exception do
    begin
      ShowMessage('WMS 서버에 연결할 수 없습니다. 전산실에 확인바랍니다.');
      Result := False;
      Exit;
    end;
  end;
  SetPosition(ZONE_OUT);
  Result := True;
end;

procedure TProxyObject.SetPosition (position : Integer);
begin
  mPosition := position;
end;

function TProxyObject.Open : Boolean;
var
  pStrOutTmp: PChar;
begin
  {
    - 버전에 따라 경로가 다를수 있음.
    - dll에 한번만 처리하고 .NET 프로레임워크가 업데이트 되어도 최신으로 실행하도록 넣기.
  }
    //  winexec('C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\regasm pc.dll /tlb:pc.tlb\n', SW_HIDE);

  pStrOutTmp := AllocMem(100);
  try
    bResult    := proxy_Open(PChar(mProxyHost+':8080'));
    bResult    := proxy_Request(PChar('<try>connect try!</try>'), pStrOutTmp, OUTPUT_MAX_SIZE);
   except on E:exception do
   begin
    ShowMessage('Proxy 서버의 응답이 없습니다. TProxyObject.Request() : '+E.Message);
    Result := False;
    Exit;
   end;
  end;
  If pStrOutTmp <> Nil then FreeMem(pStrOutTmp); 
  Result := True;
end;

procedure TProxyObject.SetOP(OP_CODE: String);
begin
  strSendBuffer := '';
  pStrInputMsg  := AllocMem(INPUT_MAX_SIZE);     //길이제한을 어디까지 할것인가?
  pStrOutputMsg := AllocMem(OUTPUT_MAX_SIZE);
  mOp_code := OP_CODE;
end;

procedure TProxyObject.InputParam(Element_Name : String; Element_Value: String);
begin
//  If (Trim(Element_Value) = '') Then
//    Element_Value := 'null';
  strSendBuffer :=  strSendBuffer + '<'+Element_Name +'>'+Element_Value+'</'+Element_Name+'>';
end;

procedure TProxyObject.ExecuteCode;
var
  Ashsql : String;
  Doc: IXMLDOMDocument;
begin
  If (mPosition = ZONE_IN) Then
  Begin
    strResultSetKey := '';
    Doc := CreateOleObject('Microsoft.XMLDOM') as IXMLDomDocument;

    try
      pStrOutputMsg := AllocMem(OUTPUT_MAX_SIZE);

      pStrInputMsg  := PChar('<FORM CODE="'+mForm_code+'"><OPERATION CODE="'+mOp_Code+'">'+strSendBuffer+'</OPERATION><ResultSetKey>' + strResultSetKey + '</ResultSetKey></FORM>');
      bResult       := proxy_Request(pStrInputMsg, pStrOutputMsg, OUTPUT_MAX_SIZE-1);
      strString     := StrPas(pStrOutputMsg);

      // check 1.<RequiredBufferSize>로 시작하는 메세지인지 확인
      // check 2.<ResultSetKey>를 가지는 메세지인지 확인
      // check 3.<ROWDATA>를 가지는지 확인

      strString := '';
     except on E:exception do
     begin
      ShowMessage('Proxy 서버의 응답이 없습니다. TProxyObject.Request() : '+E.Message);
      Exit;
      end;
    end;

    If pStrOutputMsg <> Nil Then
    begin
      FreeMem(pStrOutputMsg);
    end;
    Doc := nil;
  End Else
  Begin
    pStrInputMsg  := PChar('<FORM CODE="'+mForm_code+'"><OPERATION CODE="'+mOp_Code+'">'+strSendBuffer+'</OPERATION></FORM>');
    bResult := OperationToQuery(pStrInputMsg,pStrOutputMsg);

    Ashsql := strpas(pStrOutputMsg);

    If pStrOutputMsg <> Nil Then
      FreeMem(pStrOutputMsg);

    zConn.Disconnect;
    zConn.Properties.Text := 'CLIENT_MULTI_STATEMENTS=1';
    zConn.Connect;

    zQry.Close;
    zQry.SQL.Clear;
    zQry.SQL.Add(AshsQL);
    try
      zQry.Open;
     except
      on e:EZSQLException do
        {
         Insert, Update, Delete 등의 Stored Procedure는 결과값이 없으므로
         "CLIENT_MULTI_STATEMENTS=1" 설정으로 발생한 에러는 예외처리 한다.
         }
    End;
  End;
End;

procedure TProxyObject.ExecuteResult(MyDataSet: TRxMemoryData);
var
  Ashsql : String;
  Doc: IXMLDOMDocument;
  Element: IXMLDOMElement;
  List: IXMLDOMNodeList;
  nBufferSize: integer;
  pStrInputTmp, pStrOutputTmp: PChar;
  tmpStr : String;
begin
try
  If (mPosition = ZONE_IN) Then
  Begin
    strResultSetKey := '';
    Doc := CreateOleObject('Microsoft.XMLDOM') as IXMLDomDocument;
   repeat
    try
      pStrOutputMsg := AllocMem(OUTPUT_MAX_SIZE);

      pStrInputMsg  := PChar('<FORM CODE="'+mForm_code+'"><OPERATION CODE="'+mOp_Code+'">'+strSendBuffer+'</OPERATION><ResultSetKey>' + strResultSetKey + '</ResultSetKey></FORM>');
      bResult       := proxy_Request(pStrInputMsg, pStrOutputMsg, OUTPUT_MAX_SIZE-1);
      strString     := StrPas(pStrOutputMsg);
      Doc.loadXML(strString);

      // check 1.<RequiredBufferSize>로 시작하는 메세지인지 확인
      List := Doc.getElementsByTagName('RequiredBufferSize');
      If List.length = 1 Then
      Begin
         Element := List.item[0] as IXMLDOMElement;
         nBufferSize := StrToInt(Element.childNodes.item[0].nodeValue);

         // 요청된 크기의 버퍼를 만든 후.
         pStrOutputTmp := AllocMem(nBufferSize+1);

         // 원본 메세지를 가지고 온다.
         tmpStr := strpas(pStrOutputMsg);
         pStrInputTmp  := PChar(tmpStr);
         bResult      := proxy_Request(pStrInputTmp, pStrOutputTmp, nBufferSize);
         strString    := StrPas(pStrOutputTmp);

         If pStrOutputTmp <> Nil Then
         begin
           FreeMem(pStrOutputTmp);
         end;
         Doc.loadXML(strString);
      End;

      // check 2.<ResultSetKey>를 가지는 메세지인지 확인
      List := Doc.getElementsByTagName('ResultSetKey');
      If List.length = 1 Then
      Begin
        Element := List.item[0] as IXMLDOMElement;
        If (Element.childNodes.length =0) Then
          strResultSetKey := ''
        Else
          strResultSetKey := Element.childNodes.item[0].nodeValue;
      End Else
      Begin
//        MyMemo.Lines.Add('키값이 없습니다' + strString);
        strResultSetKey := '';
      End;

      // check 3.<ROWDATA>를 가지는지 확인
      List := Doc.getElementsByTagName('ROWDATA');
      If List.length = 1 Then
      Begin
        Element := List.item[0] as IXMLDOMElement;
        If (Element.childNodes.length>0) Then
        Begin
          MyDataSet.ClearFields;
          RowToTable(MyDataSet,Element);  // DataSet에 입력하는 함수 호출.
        End;
          // DataSet에 입력하는 함수 호출.
      End;

      strString := '';
     except on E:exception do
     begin
      ShowMessage('Proxy 서버의 응답이 없습니다. TProxyObject.Request() : '+E.Message);
      Exit;
      end;
    end;

    If pStrOutputMsg <> Nil Then
    begin
      FreeMem(pStrOutputMsg);
    end;

   until (strResultSetKey='');
    Doc := nil;
    //------
  End Else
  Begin
    pStrInputMsg  := PChar('<FORM CODE="'+mForm_code+'"><OPERATION CODE="'+mOp_Code+'">'+strSendBuffer+'</OPERATION></FORM>');
    bResult := OperationToQuery(pStrInputMsg,pStrOutputMsg);

    Ashsql := strpas(pStrOutputMsg);

    If pStrOutputMsg <> Nil Then
      FreeMem(pStrOutputMsg);

    zConn.Disconnect;
    zConn.Properties.Text := 'CLIENT_MULTI_STATEMENTS=1';
    zConn.Connect;

    zQry.Close;
    zQry.SQL.Clear;
    zQry.SQL.Add(AshsQL);
    try
      zQry.Open;
     except
      on e:EZSQLException do
        {
         Insert, Update, Delete 등의 Stored Procedure는 결과값이 없으므로
         "CLIENT_MULTI_STATEMENTS=1" 설정으로 발생한 에러는 예외처리 한다.
         }
    End;

    //외부는 여기서 실행이 모두 이루어짐.
    MyDataSet.Close;
    MyDataSet.LoadFromDataSet(zqry,0, lmAppend);
    zqry.Close;

  End;
  MyDataSet.Open;
except on e:exception do showmessage(e.Message); end;
end;

procedure TProxyObject.ExecuteResult(MyDataSet: TVirtualTable);
var
  Ashsql : String;
  Doc: IXMLDOMDocument;
  Element: IXMLDOMElement;
  List: IXMLDOMNodeList;
  nBufferSize: integer;
  pStrInputTmp, pStrOutputTmp: PChar;
  tmpStr : String;
begin
  If (mPosition = ZONE_IN) Then
  Begin
    strResultSetKey := '';
    Doc := CreateOleObject('Microsoft.XMLDOM') as IXMLDomDocument;
   repeat
    try
      pStrOutputMsg := AllocMem(OUTPUT_MAX_SIZE+1);

      pStrInputMsg  := PChar('<FORM CODE="'+mForm_code+'"><OPERATION CODE="'+mOp_Code+'">'+strSendBuffer+'</OPERATION><ResultSetKey>' + strResultSetKey + '</ResultSetKey></FORM>');
      bResult       := proxy_Request(pStrInputMsg, pStrOutputMsg, OUTPUT_MAX_SIZE);
      strString     := StrPas(pStrOutputMsg);
      Doc.loadXML(strString);

      // check 1.<RequiredBufferSize>로 시작하는 메세지인지 확인
      List := Doc.getElementsByTagName('RequiredBufferSize');
      If List.length = 1 Then
      Begin
        Element := List.item[0] as IXMLDOMElement;
        nBufferSize := StrToInt(Element.childNodes.item[0].nodeValue);

        // 요청된 크기의 버퍼를 만든 후.
        pStrOutputTmp := AllocMem(nBufferSize+1);

        // 원본 메세지를 가지고 온다.
        tmpStr := strpas(pStrOutputMsg);
        pStrInputTmp  := PChar(tmpStr);
        bResult      := proxy_Request(pStrInputTmp, pStrOutputTmp, nBufferSize);
        strString    := StrPas(pStrOutputTmp);
        If pStrOutputTmp <> Nil Then
        begin
          FreeMem(pStrOutputTmp);
        end;
        Doc.loadXML(strString);
      End;

      // check 2.<ResultSetKey>를 가지는 메세지인지 확인
      List := Doc.getElementsByTagName('ResultSetKey');
      If List.length = 1 Then
      Begin
        Element := List.item[0] as IXMLDOMElement;
        If (Element.childNodes.length =0) Then
          strResultSetKey := ''
        Else
          strResultSetKey := Element.childNodes.item[0].nodeValue;
      End Else
      Begin
        strResultSetKey := '';
      End;

      // check 3.<ROWDATA>를 가지는지 확인

      List := Doc.getElementsByTagName('ROWDATA');
      If List.length = 1 Then
      Begin
        Element := List.item[0] as IXMLDOMElement;

        If (Element.childNodes.length>0) Then
        Begin
          MyDataSet.Clear;
          RowToTable(MyDataSet,Element);  // DataSet에 입력하는 함수 호출.
        End;
      End;

      strString := '';
     except on E:exception do
     begin
      ShowMessage('Proxy 서버의 응답이 없습니다. TProxyObject.Request() : '+E.Message);
      Exit;
      end;
    end;

    If pStrOutputMsg <> Nil Then
    begin
      FreeMem(pStrOutputMsg);
    end;

   until (strResultSetKey='');
    Doc := nil;

  End Else
  Begin
    pStrInputMsg  := PChar('<FORM CODE="'+mForm_code+'"><OPERATION CODE="'+mOp_Code+'">'+strSendBuffer+'</OPERATION></FORM>');
    bResult := OperationToQuery(pStrInputMsg,pStrOutputMsg);

    Ashsql := strpas(pStrOutputMsg);

    If pStrOutputMsg <> Nil Then
      FreeMem(pStrOutputMsg);

    zConn.Disconnect;
    zConn.Properties.Text := 'CLIENT_MULTI_STATEMENTS=1';
    zConn.Connect;

    zQry.Close;
    zQry.SQL.Clear;
    zQry.SQL.Add(AshsQL);
    try
      zQry.Open;
     except
      on e:EZSQLException do
        {
         Insert, Update, Delete 등의 Stored Procedure는 결과값이 없으므로
         "CLIENT_MULTI_STATEMENTS=1" 설정으로 발생한 에러는 예외처리 한다.
         }
    End; 
    MyDataSet.Close;
    MyDataSet.Assign(zqry);
    zqry.Close;
  End;
  MyDataSet.Open;  
end;


procedure TProxyObject.RowToTable(MyDataSet: TRxMemoryData; Element:IXMLDOMElement);
var
  ColNum, RowNum : integer;
begin
  If (Element.childNodes.length>0) then    //Attribute 가 있다면  데이터 셋의 결과.
  Begin
    For RowNum :=0 To Element.childNodes.length -1  Do
    Begin
      IF (Element.childNodes.item[RowNum].nodeName = 'ROW') Then               //레코드값은 ROW로 구분.
      Begin
        If (Not MyDataSet.Active) Then
          MyDataSet.Open;

        MyDataSet.Append;
        For ColNum := 0 to MyDataSet.Fields.Count -1 do
        Begin
          If (Element.childNodes.item[RowNum].attributes.getNamedItem(MyDataSet.Fields.Fields[ColNum].FieldName).nodeName<>'') Then
          Begin
            MyDataSet.Fields.Fields[ColNum].AsVariant := Element.childNodes.item[RowNum].attributes.getNamedItem(MyDataSet.Fields.Fields[ColNum].FieldName).nodeValue;
          End;
        End;
        MyDataSet.Post;
      End;
    End;
  End;
end;

procedure TProxyObject.RowToTable(MyDataSet: TVirtualTable; Element:IXMLDOMElement);
var
  ColNum, RowNum : integer;
begin
  If (Element.childNodes.length>0) then    //Attribute 가 있다면  데이터 셋의 결과.
  Begin
    For RowNum :=0 To Element.childNodes.length -1  Do
    Begin
      IF (Element.childNodes.item[RowNum].nodeName = 'ROW') Then               //레코드값은 ROW로 구분.
      Begin
        If (Not MyDataSet.Active) Then
          MyDataSet.Open;
        For ColNum := 0 to Element.childNodes.item[RowNum].attributes.length -1 do  //필드값 구분.
        Begin
          If (MyDataSet.FieldDefs.IndexOf(Element.childNodes.item[RowNum].attributes.item[ColNum].nodeName)<0) Then
            MyDataSet.FieldDefs.Add(Element.childNodes.item[RowNum].attributes.item[ColNum].nodeName,ftUnknown ,0,False);

          If ColNum=0 Then
            MyDataSet.Append
          Else
            MyDataSet.Edit;

          MyDataSet.FieldByName(Element.childNodes.item[RowNum].attributes.item[ColNum].nodeName).AsVariant := Element.childNodes.item[RowNum].attributes.item[ColNum].NodeValue;
          MyDataSet.Post;
        End;
      End;
    End;
  End;
end;

end.
