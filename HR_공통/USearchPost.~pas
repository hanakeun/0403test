unit USearchPost;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, DBGrids, StdCtrls, ExtCtrls, ComCtrls, ToolWin, DB,
  MemDS, VirtualTable, ZAbstractRODataset, ZAbstractDataset, ZDataset,
  ZConnection, URDataCombo;

type
  TfmSearchPost = class(TForm)
    ToolBar1: TToolBar;
    btnInquiry: TToolButton;
    btnClose: TToolButton;
    gb_cd_save: TGroupBox;
    Image1: TImage;
    Label3: TLabel;
    edtPost: TEdit;
    grdPost: TDBGrid;
    StatusBar1: TStatusBar;
    vtSearchPost: TVirtualTable;
    dsSearchPost: TDataSource;
    vtPost: TVirtualTable;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnInquiryClick(Sender: TObject);
    procedure btnCloseClick(Sender: TObject);
    procedure grdPostDblClick(Sender: TObject);
    procedure edtPostKeyPress(Sender: TObject; var Key: Char);
    procedure FormKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure grdPostTitleClick(Column: TColumn);
    procedure grdPostDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    //procedure edtPostKeyPress(Sender: TObject; var Key: Char);

  private
    ashSql, ashStr: String;
  public
    { Public declarations }
    procedure MouseWheelHandler(var Message: TMessage); override;
  end;

var
  fmSearchPost: TfmSearchPost;
  arrPostInfo: array[0..3] of String;

implementation

uses coop_utils, coophr_utils, coop_sql_updel, Unit1, USearchEmp;

{$R *.dfm}

var colIdx0: Integer; titleCaption0: String;

procedure TfmSearchPost.MouseWheelHandler(var Message: TMessage);
begin
  if Message.msg = WM_MOUSEWHEEL then
  begin
    if (ActiveControl is TDBgrid) then
    begin
      if Message.wParam > 0 then
      begin
        keybd_event(VK_UP, VK_UP, 0, 0);
      end
      else if Message.wParam < 0 then
      begin
        keybd_event(VK_DOWN, VK_DOWN, 0, 0);
      end;
    end;
  end;
end;

procedure TfmSearchPost.FormCreate(Sender: TObject);
begin
  // ShowMessage 숨김현상 방지
  Screen.OnActiveFormChange := Form1.OnScreenActiveFormChange;

  // 부서입력 확인
  //edtPost.Text := (Parent.FindComponent('edtPostName') as TEdit).Text;
  //ShowMessage(TEdit(userForm.FindComponent('edtPostName')).Text);
  //ShowMessage((TForm(Parent).FindComponent('edtPostName') as TEdit).Text);
  {
  try
    edtPost.Text := fmSearchEmp.edtPostName.Text;
  except 
    edtPost.Text := Form1.edtPostName.Text;
  end;
  }
  //edtPost.Text := Form1.edtPostName.Text;
  
  if isEmpty(edtPost.Text) then
    btnInquiryClick(btnInquiry);

  // 정렬 컬럼 초기화
  colIdx0 := 0;
  titleCaption0 := grdPost.Columns[0].Title.Caption;
end;

// 조회
procedure TfmSearchPost.btnInquiryClick(Sender: TObject);
begin
  ashSql := 'SELECT'
          + ' A.post_code'
	        + ', A.post_name'
	        + ', A.mng_post'
	        + ', (SELECT post_name FROM admin_post WHERE post_code = A.mng_post) AS mng_name'
          + ' FROM admin_post A'
          + ' WHERE post_code LIKE "%' + Trim(edtPost.Text) + '%"'
          + ' OR post_name LIKE "%' + Trim(edtPost.Text) + '%"';

  // 2013-11-04 coop_sql_updel 적용
  //MySQL_OpenAssign(Form1.qrysql, ashSql, vtSearchPost);
  ashStr := MySQL_Assign(Form1.db_cupg, Form1.qrysql, ashSql, vtSearchPost);
  try
    StrToInt(ashStr);
  except
    ShowMessage('오류가 발생하였습니다.[' + ashStr + '](ERR:108)');
    Exit;
  end;

  if vtSearchPost.RecordCount = 1 then // 검색부서가 하나이면
  begin
    grdPostDblClick(grdPost); 
  end
  else if vtSearchPost.RecordCount < 1 then
  begin
    //Application.Title := '부서검색';
    ShowMessage('검색결과가 없습니다.');
  end;
end;

// 부서 그리드 더블클릭 시 모달리스 창으로 부서정보 전달
procedure TfmSearchPost.grdPostDblClick(Sender: TObject);
//var postCodeStaffYn: String;
begin 
  if vtSearchPost.RecordCount > 0 then
  begin
  // 사용자권한 부서
  //getSustaff(Form1.qrysql, vtPost, 'hr_post_code', mpst_code);

  // 사용자권한 유무
  //postCodeStaffYn := getStaffYn(vtPost, 'hr_post_code', vtSearchPost.FieldByName('post_code').AsString);

  //if postCodeStaffYn = 'Y' then
  //begin
    {
    [0] 부서코드
    [1] 부서명
    [2] 관리부서(상위부서)
    [3] 관리부서명
    }
    arrPostInfo[0] := vtSearchPost.fieldByName('post_code').AsString;
    arrPostInfo[1] := vtSearchPost.fieldByName('post_name').AsString;
    arrPostInfo[2] := vtSearchPost.fieldByName('mng_post').AsString;
    arrPostInfo[3] := vtSearchPost.fieldByName('mng_name').AsString;

    ModalResult := mrOk;
  {end
  else
  begin
    //Application.Title := '부서검색';
    ShowMessage('선택한 부서의 조회권한이 없습니다.');
    Exit;
  end;}
  end;
end;

// 종료
procedure TfmSearchPost.btnCloseClick(Sender: TObject);
begin
  Close;
end;

// FormClose
procedure TfmSearchPost.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  vtSearchPost.Close;
  Action := caFree;
end;

// 조회조건 부서 edit에서 엔터 키로 조회
procedure TfmSearchPost.edtPostKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
    btnInquiryClick(btnInquiry);
end;

procedure TfmSearchPost.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (Shift = [ssAlt]) or (Shift = [ssCtrl]) then
    Exit;

  case Key of
    VK_RIGHT: // VK_RIGHT 오른쪽커서 이동키
      begin
        SelectNext(ActiveControl, True, True);
        key := 0;
      end;
    VK_RETURN:
      begin
        SelectNext(ActiveControl, True, True);
        key := 0;
      end;
    VK_F1:
      begin
        ShowMessage('F1');
        Key := 0;
      end;
    VK_F9:
      begin
        if btnInquiry.Enabled then
          btnInquiryClick(btnInquiry);
        Key := 0;
      end;
    VK_ESCAPE: // ESC 키
      begin
        if btnClose.Enabled then
          btnCloseClick(btnClose);
        Key := 0;
      end;
  end;
end;

// 정렬
procedure TfmSearchPost.grdPostTitleClick(Column: TColumn);
var
  colIdx: Integer;
  titleCaption, colName: String;
begin
  if (vtSearchPost.RecordCount > 1) and (Column.Index <> 0) then
  begin
    colIdx := Column.Index;
    titleCaption := Column.Title.Caption;
    colName := Column.FieldName;

    if vtSearchPost.IndexFieldNames = colName then // ASC
    begin
      vtSearchPost.IndexFieldNames := colName + ' DESC';
      grdPost.Columns[colIdx].Title.Caption := titleCaption0 + '▼';
    end
    else if vtSearchPost.IndexFieldNames = colName + ' DESC' then // DESC
    begin
      vtSearchPost.IndexFieldNames := colName;
      grdPost.Columns[colIdx].Title.Caption := titleCaption0 + '▲';
    end
    else
    begin
      grdPost.Columns[colIdx0].Title.Caption := titleCaption0;

      titleCaption0 := titleCaption;
      vtSearchPost.IndexFieldNames := colName;
      grdPost.Columns[colIdx].Title.Caption := titleCaption + '▲';
    end;
    colIdx0 := colIdx;
  end;
end;

procedure TfmSearchPost.grdPostDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn;
  State: TGridDrawState);
var
  vDbGrid: TDBGrid absolute Sender;
  LeftPos: Integer;
  CellStr: string;
begin
  if DataCol = 0 then
  begin
    //vDbGrid.Canvas.TextOut(Rect.Left + 2, Rect.Top + 2, IntToStr(vDbGrid.DataSource.DataSet.RecNo)); // 왼쪽정렬
    // 가운데정렬
    with vDbGrid.Canvas do
    begin
      CellStr := IntToStr(vDbGrid.DataSource.DataSet.RecNo);
      LeftPos := ((Rect.Right - Rect.Left - TextWidth(CellStr)) div 2) + Rect.Left;
      TextOut(LeftPos, Rect.Top+2, CellStr);
    end;
  end;
end;

end.
